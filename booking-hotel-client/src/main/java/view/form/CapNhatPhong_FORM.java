package view.form;

import com.google.gson.Gson;
import dto.LoaiPhongDTO;
import dto.PhongDTO;
import model.Request;
import model.Response;
import socket.SocketManager;
import utils.custom_element.*;
import dao.Phong_DAO;
import model.Phong;

import javax.swing.*;
import javax.swing.border.Border;
import javax.swing.border.CompoundBorder;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.JTableHeader;
import javax.swing.table.TableColumn;
import java.awt.*;
import java.awt.event.*;
import java.io.IOException;
import java.util.*;
import java.util.List;

public class CapNhatPhong_FORM extends JPanel implements ActionListener, MouseListener {
    private final JTextArea txaMoTa;
    private DefaultTableModel tableModel;
    private JTable table;
    private Phong_DAO phongDAO;
    private JTextField txtTenPhong, txtGiaPhong, txtSoNguoi;
    private JComboBox<String> cmbLoaiPhong, cmbTrangThai;
    private Map<String, String> loaiPhongMap = new HashMap<>();

    public CapNhatPhong_FORM() {
        phongDAO = new Phong_DAO();
        setBackground(new Color(16, 16, 20));
        Box mainBox = Box.createVerticalBox();
        mainBox.add(Box.createVerticalStrut(10));
        // Tim kiem
        JTextField txtSearch = new JTextField("T√¨m ki·∫øm t√™n ph√≤ng");
        Border emptyBorder = BorderFactory.createEmptyBorder(13, 52, 12, 0);
        txtSearch.setBounds(0, 0, 280, 45);
        txtSearch.setBorder(emptyBorder);
        txtSearch.setBackground(new Color(40, 40, 44));
        txtSearch.setForeground(new Color(255, 255, 255, 125));
        txtSearch.setFont(FontManager.getManrope(Font.PLAIN, 15));
        CompoundBorder combinedBorder = BorderFactory.createCompoundBorder(BorderFactory.createLineBorder(new Color(83, 152, 255)), emptyBorder);
        // FocusListener cho √¥ t√¨m ki·∫øm ph√≤ng
        txtSearch.addFocusListener(new FocusAdapter() {
            @Override
            public void focusGained(FocusEvent e) {
                txtSearch.setBorder(combinedBorder);  // Thi·∫øt l·∫≠p border khi focus v√†o
                if (txtSearch.getText().equals("T√¨m ki·∫øm t√™n ph√≤ng")) {
                    txtSearch.setText("");  // X√≥a text m·∫∑c ƒë·ªãnh khi focus
                    txtSearch.setForeground(Color.WHITE);  // ƒê·ªïi m√†u ch·ªØ khi focus
                }
            }

            @Override
            public void focusLost(FocusEvent e) {
                txtSearch.setBorder(emptyBorder);  // Thi·∫øt l·∫≠p l·∫°i border khi m·∫•t focus
                String keyword = txtSearch.getText().trim();

                if (keyword.isEmpty()) {
                    txtSearch.setForeground(new Color(255, 255, 255, 125));  // ƒê·ªïi m√†u ch·ªØ khi kh√¥ng c√≥ text
                    txtSearch.setText("T√¨m ki·∫øm t√™n ph√≤ng");  // ƒê·∫∑t l·∫°i text m·∫∑c ƒë·ªãnh
                }
            }
        });

// üëâ G·ªçi t√¨m ki·∫øm khi nh·∫•n Enter
        txtSearch.addActionListener(e -> {
            String keyword = txtSearch.getText().trim();
            if (!keyword.isEmpty() && !keyword.equals("T√¨m ki·∫øm t√™n ph√≤ng")) {
                timKiemPhong(keyword);  // G·ªçi ph∆∞∆°ng th·ª©c t√¨m ki·∫øm ph√≤ng
            }
        });


        JLabel searchIcon = new JLabel(new ImageIcon("imgs/TimKiemIcon.png"));
        searchIcon.setBounds(12, 12, 24, 24);

        JPanel searchPanel = new JPanel();
        searchPanel.setOpaque(false);
        searchPanel.setLayout(null);
        Dimension searchPanelSize = new Dimension(280, 45);
        searchPanel.setPreferredSize(searchPanelSize);
        searchPanel.setMinimumSize(searchPanelSize);
        searchPanel.setMaximumSize(searchPanelSize);

        searchPanel.add(searchIcon);
        searchPanel.add(txtSearch);
        Box searchBox = Box.createHorizontalBox();
        searchBox.add(Box.createHorizontalStrut(0));
        searchBox.add(searchPanel);
        searchBox.add(Box.createGlue());


        // Form
        Box b1 = Box.createVerticalBox();
        Box b2 = Box.createHorizontalBox();
        b2.add(createFormBox("T√™n ph√≤ng", txtTenPhong = new JTextField()));
        b2.add(createFormBox("Lo·∫°i ph√≤ng", cmbLoaiPhong = new JComboBox<>()));
        b2.add(createFormBox("Gi√° ph√≤ng", txtGiaPhong = new JTextField()));
        b2.add(createFormBox("S·ªë ng∆∞·ªùi", txtSoNguoi = new JTextField()));

        String[] trangThaiOptions = {"C√≤n tr·ªëng",  "ƒêang s·ª≠ d·ª•ng"};
        b2.add(createFormBox("Tr·∫°ng th√°i", cmbTrangThai = new JComboBox<>(trangThaiOptions)));
        Dimension b2Size = new Dimension(1642, 100);
        b2.setPreferredSize(b2Size);
        b2.setMinimumSize(b2Size);
        b2.setMaximumSize(b2Size);


        Box b3 = Box.createHorizontalBox();
        Box b4 = Box.createVerticalBox();
        JLabel lblMota = new JLabel("M√¥ t·∫£");
        lblMota.setFont(FontManager.getManrope(Font.PLAIN, 15));
        lblMota.setForeground(Color.WHITE);
        Dimension lblMotaSize = new Dimension(1245, 20);

        Box lblMotaBox = Box.createHorizontalBox();
        lblMotaBox.setOpaque(false);
        lblMotaBox.setPreferredSize(lblMotaSize);
        lblMotaBox.setMaximumSize(lblMotaSize);
        lblMotaBox.setMinimumSize(lblMotaSize);
        txaMoTa = new JTextArea();
        Dimension txaMoTaSize = new Dimension(1250, 220);
        txaMoTa.setPreferredSize(txaMoTaSize);
        txaMoTa.setMaximumSize(txaMoTaSize);
        txaMoTa.setMinimumSize(txaMoTaSize);
        txaMoTa.setBackground(new Color(40, 40, 44));
        txaMoTa.setForeground(Color.white);
        txaMoTa.setFont(FontManager.getManrope(Font.PLAIN, 14));
        txaMoTa.setBorder(BorderFactory.createEmptyBorder(10, 10, 0, 0));

        lblMotaBox.add(lblMota);
        b4.add(lblMotaBox);
        b4.add(txaMoTa);
        Box b5 = Box.createVerticalBox();

        RoundedButton btnThem = createHandleButton("Th√™m");
        RoundedButton btnSua = createHandleButton("S·ª≠a");
        RoundedButton btnXoa = createHandleButton("X√≥a");
        RoundedButton btnLamMoi = createHandleButton("L√†m m·ªõi");

        b5.add(Box.createVerticalStrut(20));
        b5.add(btnThem);
        b5.add(Box.createVerticalStrut(20));
        b5.add(btnSua);
        b5.add(Box.createVerticalStrut(20));
        b5.add(btnXoa);
        b5.add(Box.createVerticalStrut(20));
        b5.add(btnLamMoi);


        b3.add(b4);
        b3.add(Box.createHorizontalStrut(80));
        b3.add(b5);

        b1.add(b2);
        b1.add(b3);


        // Tieu de
        JLabel titleLabel = new JLabel("Danh s√°ch ph√≤ng");
        titleLabel.setFont(FontManager.getManrope(Font.BOLD, 16));
        titleLabel.setForeground(Color.white);

        RoundedPanel titlePanel = new RoundedPanel(10, 0, new Color(27, 112, 213));
        titlePanel.setPreferredSize(new Dimension(1642, 50));
        titlePanel.setMinimumSize(new Dimension(1642, 50));
        titlePanel.setMaximumSize(new Dimension(1642, 50));
        titlePanel.setOpaque(false);
        titlePanel.setLayout(new BoxLayout(titlePanel, BoxLayout.X_AXIS));

        titlePanel.add(Box.createHorizontalStrut(15));
        titlePanel.add(titleLabel);
        titlePanel.add(Box.createHorizontalGlue());


        // T·∫°o bang
        Box b6 = Box.createHorizontalBox();
        String[] colName = {"M√£ ph√≤ng", "T√™n ph√≤ng", "Lo·∫°i ph√≤ng", "Gi√° ph√≤ng", "S·ªë ng∆∞·ªùi", "Tr·∫°ng th√°i", "M√¥ t·∫£"};
        tableModel = new DefaultTableModel(colName, 0) {
            private static final long serialVersionUID = 1L;

            @Override
            public boolean isCellEditable(int row, int column) {
                return false;
            }
        };
        JScrollPane scroll;
        b6.add(scroll = new JScrollPane(table = new JTable(tableModel), JScrollPane.VERTICAL_SCROLLBAR_ALWAYS, JScrollPane.HORIZONTAL_SCROLLBAR_AS_NEEDED));
        table.setBackground(new Color(24, 24, 28));
        table.setForeground(Color.WHITE);
        table.setFont(FontManager.getManrope(Font.PLAIN, 16));
        table.setRowHeight(55);

        JTableHeader header = table.getTableHeader();
        header.setDefaultRenderer(new CustomHeaderRenderer(new Color(38, 38, 42), Color.white));
        header.setPreferredSize(new Dimension(header.getPreferredSize().width, 55));
        header.setReorderingAllowed(false);

        CustomCellRenderer cellRenderer = new CustomCellRenderer();
        for (int i = 0; i < table.getColumnCount(); i++) {
            TableColumn column = table.getColumnModel().getColumn(i);
            column.setCellRenderer(cellRenderer);
        }

        scroll.setBounds(30, 380, 1642, 200);
        scroll.setBorder(null);
        scroll.getViewport().setOpaque(false);
        scroll.setViewportBorder(null);

        
        mainBox.add(searchBox);
        mainBox.add(Box.createVerticalStrut(20));
        mainBox.add(b1);
        mainBox.add(Box.createVerticalStrut(20));
        mainBox.add(titlePanel);
        mainBox.add(Box.createVerticalStrut(5));
        mainBox.add(b6);
        add(mainBox);
        loadComboBoxLoaiPhong();
        table.addMouseListener(this);
        btnXoa.addActionListener(this);
        btnThem.addActionListener(this);
        btnSua.addActionListener(this);
        btnLamMoi.addActionListener(this);
        loadTableData();

    }
    private Box createFormBox(String label, JTextField txt) {
        Box b = Box.createVerticalBox();
        Dimension boxSize = new Dimension(332, 110);
        b.setPreferredSize(boxSize);
        b.setMaximumSize(boxSize);
        b.setMaximumSize(boxSize);

        JLabel lbl = new JLabel(label);
        lbl.setFont(FontManager.getManrope(Font.PLAIN, 15));
        lbl.setForeground(Color.WHITE);

        Box lblBox = Box.createHorizontalBox();
        lblBox.setPreferredSize(new Dimension(255, 20));
        lblBox.setMaximumSize(new Dimension(255, 20));
        lblBox.setMinimumSize(new Dimension(255, 20));
        lblBox.add(lbl);

        txt.setBackground(new Color(40, 40, 44));
        Dimension txtFieldSize = new Dimension(260, 45);
        txt.setPreferredSize(txtFieldSize);
        txt.setMaximumSize(txtFieldSize);
        txt.setMinimumSize(txtFieldSize);
        txt.setForeground(Color.white);
        txt.setFont(FontManager.getManrope(Font.PLAIN, 14));
        Border emptyBorder = BorderFactory.createEmptyBorder(0, 10, 0, 0);
        CompoundBorder combinedBorder = BorderFactory.createCompoundBorder(BorderFactory.createLineBorder(new Color(83, 152, 255)), emptyBorder);
        txt.setBorder(emptyBorder);

        txt.addFocusListener(new FocusAdapter() {
            @Override
            public void focusGained(FocusEvent e) {
                txt.setBorder(combinedBorder);
            }

            @Override
            public void focusLost(FocusEvent e) {
                txt.setBorder(emptyBorder);
            }
        });

        b.add(lblBox);
        b.add(Box.createVerticalStrut(6));
        b.add(txt);
        b.setBorder(BorderFactory.createEmptyBorder(0, 0, 35, 72));

        return b;
    }

    private Box createFormBox(String label, JComboBox<String> cmb) {
        Box b = Box.createVerticalBox();
        Dimension boxSize = new Dimension(332, 110);
        b.setPreferredSize(boxSize);
        b.setMaximumSize(boxSize);
        b.setMaximumSize(boxSize);

        JLabel lbl = new JLabel(label);
        lbl.setFont(FontManager.getManrope(Font.PLAIN, 15));
        lbl.setForeground(Color.WHITE);

        Box lblBox = Box.createHorizontalBox();
        lblBox.setPreferredSize(new Dimension(255, 20));
        lblBox.setMaximumSize(new Dimension(255, 20));
        lblBox.setMinimumSize(new Dimension(255, 20));
        lblBox.add(lbl);

        cmb.setBackground(new Color(40, 40, 44));
        Dimension txtFieldSize = new Dimension(260, 45);
        cmb.setPreferredSize(txtFieldSize);
        cmb.setMaximumSize(txtFieldSize);
        cmb.setMinimumSize(txtFieldSize);
        cmb.setFont(FontManager.getManrope(Font.PLAIN, 14));
        cmb.setBorder(BorderFactory.createEmptyBorder(0, 10, 0, 0));

        b.add(lblBox);
        b.add(Box.createVerticalStrut(6));
        b.add(cmb);
        b.setBorder(BorderFactory.createEmptyBorder(0, 0, 35, 72));

        return b;
    }

    private RoundedButton createHandleButton(String buttonLabel) {
        RoundedButton button = new RoundedButton(buttonLabel, 5);
        Dimension buttonSize = new Dimension(259, 45);
        button.setPreferredSize(buttonSize);
        button.setMaximumSize(buttonSize);
        button.setMinimumSize(buttonSize);
        Color defaultBackground = new Color(80, 80, 88);
        Color hoverBackground = new Color(89, 98, 136);

        button.setBackground(defaultBackground);
        button.setForeground(Color.white);
        button.setFont(FontManager.getManrope(Font.PLAIN, 16));
        button.setContentAreaFilled(false);
        button.setFocusPainted(false);
        button.setBorderPainted(false);
//        button.addActionListener(this);


        button.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseEntered(MouseEvent e) {
                button.setBackground(hoverBackground);
            }

            @Override
            public void mouseExited(MouseEvent e) {
                button.setBackground(defaultBackground);
            }
        });

        return button;
    }

    private void loadTableData() {
        tableModel.setRowCount(0); // X√≥a d·ªØ li·ªáu c≈© trong b·∫£ng
        Request<Void> request = new Request<>("GET_ALL_PHONG", null);

        try {
            SocketManager.send(request);

            Response response = SocketManager.receive(Response.class);

            if (response != null && response.isSuccess()) {
                List<?> rawList = (List<?>) response.getData();

                if (rawList == null || rawList.isEmpty()) {
                    JOptionPane.showMessageDialog(this, "Kh√¥ng c√≥ d·ªØ li·ªáu ph√≤ng!", "Th√¥ng b√°o", JOptionPane.INFORMATION_MESSAGE);
                    return;
                }

                Gson gson = new Gson();
                for (Object obj : rawList) {
                    String json = gson.toJson(obj);
                    PhongDTO phong = gson.fromJson(json, PhongDTO.class);

                    // X·ª≠ l√Ω tr·∫°ng th√°i ph√≤ng
                    String trangThaiPhong = phong.getTinhTrang() == 0 ? "C√≤n tr·ªëng" : "ƒêang s·ª≠ d·ª•ng";

                    tableModel.addRow(new Object[]{
                            phong.getMaPhong(),
                            phong.getTenPhong(),
                            phong.getMaLoai(),
                            phong.getGiaPhong(),
                            phong.getSoNguoi(),
                            trangThaiPhong, // Hi·ªÉn th·ªã tr·∫°ng th√°i d∆∞·ªõi d·∫°ng chu·ªói
                            phong.getMoTa()
                    });
                }

                System.out.println("Loaded " + rawList.size() + " rooms into table");

            } else {
                JOptionPane.showMessageDialog(this, "Kh√¥ng th·ªÉ l·∫•y d·ªØ li·ªáu ph√≤ng t·ª´ server!", "L·ªói", JOptionPane.ERROR_MESSAGE);
            }

        } catch (IOException e) {
            e.printStackTrace();
            int option = JOptionPane.showConfirmDialog(this,
                    "L·ªói k·∫øt n·ªëi ƒë·∫øn server: " + e.getMessage() + "\nB·∫°n c√≥ mu·ªën th·ª≠ l·∫°i?",
                    "L·ªói h·ªá th·ªëng", JOptionPane.YES_NO_OPTION, JOptionPane.ERROR_MESSAGE);
            if (option == JOptionPane.YES_OPTION) {
                loadTableData();
            }
        }

        table.repaint();
        table.revalidate();
    }


    private void loadComboBoxLoaiPhong() {
        cmbLoaiPhong.removeAllItems(); // X√≥a t·∫•t c·∫£ c√°c m·ª•c hi·ªán c√≥ trong ComboBox
        loaiPhongMap.clear();          // X√≥a √°nh x·∫° c≈©
        Request<Void> request = new Request<>("GET_ALL_LOAIPHONG", null);
        Set<String> addedLoaiPhong = new HashSet<>();

        try {
            SocketManager.send(request);
            Response response = SocketManager.receive(Response.class);

            if (response != null && response.isSuccess()) {
                List<?> rawList = (List<?>) response.getData();
                Gson gson = new Gson();

                for (Object obj : rawList) {
                    String json = gson.toJson(obj);
                    LoaiPhongDTO loaiPhong = gson.fromJson(json, LoaiPhongDTO.class);

                    if (loaiPhong != null && !addedLoaiPhong.contains(loaiPhong.getTenLoai())) {
                        cmbLoaiPhong.addItem(loaiPhong.getTenLoai());
                        addedLoaiPhong.add(loaiPhong.getTenLoai());

                        // ‚ûï B∆∞·ªõc 2: √Ånh x·∫° t√™n lo·∫°i ph√≤ng ‚Üî m√£ lo·∫°i ph√≤ng
                        loaiPhongMap.put(loaiPhong.getTenLoai(), loaiPhong.getMaLoai());
                    }
                }
            } else {
                JOptionPane.showMessageDialog(this, "Kh√¥ng th·ªÉ t·∫£i d·ªØ li·ªáu lo·∫°i ph√≤ng!", "L·ªói", JOptionPane.ERROR_MESSAGE);
            }
        } catch (IOException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "L·ªói k·∫øt n·ªëi server khi load lo·∫°i ph√≤ng!", "L·ªói", JOptionPane.ERROR_MESSAGE);
        }
    }

    private List<?> layDanhSachPhong() {
        Request<?> request = new Request<>("GET_ALL_PHONG", null);

        try {
            SocketManager.send(request);
            Response response = SocketManager.receive(Response.class);
            if (response != null && response.isSuccess()) {
                return (List<?>) response.getData(); // Tr·∫£ v·ªÅ danh s√°ch ki·ªÉu Object
            }
        } catch (IOException e) {
            JOptionPane.showMessageDialog(this, "L·ªói l·∫•y danh s√°ch ph√≤ng t·ª´ server!", "L·ªói", JOptionPane.ERROR_MESSAGE);
        }

        return new ArrayList<>(); // Tr·∫£ v·ªÅ danh s√°ch r·ªóng n·∫øu l·ªói
    }

    private List<PhongDTO> layDanhSachPhongThuc() {
        List<?> rawList = layDanhSachPhong();
        List<PhongDTO> danhSach = new ArrayList<>();
        Gson gson = new Gson();

        for (Object obj : rawList) {
            PhongDTO phong = gson.fromJson(gson.toJson(obj), PhongDTO.class);
            danhSach.add(phong);
        }

        return danhSach;
    }

    private String sinhMaPhongMoi() {
        List<PhongDTO> danhSach = layDanhSachPhongThuc();
        int maxSo = 0;

        for (PhongDTO p : danhSach) {
            String ma = p.getMaPhong();
            if (ma != null && ma.matches("PH\\d+")) {
                int so = Integer.parseInt(ma.substring(2)); // B·ªè "PH"
                if (so > maxSo) {
                    maxSo = so;
                }
            }
        }

        return String.format("PH%04d", maxSo + 1); // VD: PH0001, PH0002,...
    }


    private void themPhong() {
        // L·∫•y d·ªØ li·ªáu t·ª´ giao di·ªán
        String tenPhong = txtTenPhong.getText().trim();
        String tenLoaiChon = (String) cmbLoaiPhong.getSelectedItem(); // l·∫•y t√™n lo·∫°i t·ª´ combobox
        String giaStr = txtGiaPhong.getText().trim();
        String soNguoiStr = txtSoNguoi.getText().trim();
        String moTa = txaMoTa.getText().trim();
        int tinhTrang = cmbTrangThai.getSelectedIndex(); // 0: Kh√¥ng s·∫µn s√†ng, 1: S·∫µn s√†ng

        // Ki·ªÉm tra d·ªØ li·ªáu b·∫Øt bu·ªôc
        if (tenPhong.isEmpty() || tenLoaiChon == null || giaStr.isEmpty() || soNguoiStr.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Vui l√≤ng nh·∫≠p ƒë·∫ßy ƒë·ªß th√¥ng tin ph√≤ng!", "Thi·∫øu th√¥ng tin", JOptionPane.WARNING_MESSAGE);
            return;
        }

        // Chuy·ªÉn ki·ªÉu d·ªØ li·ªáu v√† ki·ªÉm tra h·ª£p l·ªá
        double giaPhong;
        int soNguoi;
        try {
            giaPhong = Double.parseDouble(giaStr);
            soNguoi = Integer.parseInt(soNguoiStr);
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Gi√° ph√≤ng v√† s·ªë ng∆∞·ªùi ph·∫£i l√† s·ªë h·ª£p l·ªá!", "L·ªói nh·∫≠p li·ªáu", JOptionPane.ERROR_MESSAGE);
            return;
        }

        // ‚úÖ √Ånh x·∫° ng∆∞·ª£c: t·ª´ t√™n lo·∫°i ‚Üí m√£ lo·∫°i ƒë·ªÉ l∆∞u
        String maLoaiPhong = loaiPhongMap.get(tenLoaiChon); // Map<String, String>: t√™n ‚Üí m√£
        if (maLoaiPhong == null) {
            JOptionPane.showMessageDialog(this, "Kh√¥ng t√¨m th·∫•y m√£ lo·∫°i ph√≤ng ph√π h·ª£p!", "L·ªói √°nh x·∫°", JOptionPane.ERROR_MESSAGE);
            return;
        }

        // Sinh m√£ ph√≤ng m·ªõi
        String maPhongMoi = sinhMaPhongMoi();
        if (maPhongMoi == null) {
            JOptionPane.showMessageDialog(this, "Kh√¥ng th·ªÉ t·∫°o m√£ ph√≤ng m·ªõi!", "L·ªói h·ªá th·ªëng", JOptionPane.ERROR_MESSAGE);
            return;
        }

        // G√°n d·ªØ li·ªáu v√†o ƒë·ªëi t∆∞·ª£ng DTO
        PhongDTO phong = new PhongDTO();
        phong.setMaPhong(maPhongMoi);
        phong.setTenPhong(tenPhong);
        phong.setMaLoai(maLoaiPhong); // D√πng m√£ ƒë√£ √°nh x·∫°
        phong.setGiaPhong(giaPhong);
        phong.setSoNguoi(soNguoi);
        phong.setTinhTrang(tinhTrang);
        phong.setMoTa(moTa);

        // T·∫°o v√† g·ª≠i request ƒë·∫øn server
        Request<PhongDTO> request = new Request<>("THEM_PHONG", phong);
        try {
            SocketManager.send(request);
            Response response = SocketManager.receive(Response.class);

            if (response != null && response.isSuccess()) {
                JOptionPane.showMessageDialog(this, "Th√™m ph√≤ng th√†nh c√¥ng!", "Th√†nh c√¥ng", JOptionPane.INFORMATION_MESSAGE);
                lamMoiPhong(); // L√†m m·ªõi d·ªØ li·ªáu giao di·ªán
            } else {
                JOptionPane.showMessageDialog(this, "Th√™m ph√≤ng th·∫•t b·∫°i!", "Th·∫•t b·∫°i", JOptionPane.ERROR_MESSAGE);
            }
        } catch (IOException e) {
            JOptionPane.showMessageDialog(this, "L·ªói k·∫øt n·ªëi ƒë·∫øn server: " + e.getMessage(), "L·ªói h·ªá th·ªëng", JOptionPane.ERROR_MESSAGE);
        }
    }



    private void suaPhong() {
        int selectedRow = table.getSelectedRow();
        if (selectedRow == -1) {
            JOptionPane.showMessageDialog(this, "Vui l√≤ng ch·ªçn ph√≤ng c·∫ßn s·ª≠a!", "Th√¥ng b√°o", JOptionPane.WARNING_MESSAGE);
            return;
        }

        if (!validateInputs()) {
            return;
        }

        try {
            String maPhong = (String) tableModel.getValueAt(selectedRow, 0);
            String tenPhong = txtTenPhong.getText().trim();
            double giaPhong = Double.parseDouble(txtGiaPhong.getText().trim());

// L·∫•y gi√° tr·ªã t·ª´ JComboBox
            int tinhTrang = cmbTrangThai.getSelectedIndex(); // V√≠ d·ª•: 0 = C√≤n tr·ªëng, 1 = ƒêang s·ª≠ d·ª•ng
            int soNguoi = Integer.parseInt(txtSoNguoi.getText().trim());
            String moTa = txaMoTa.getText().trim();
            String tenLoai = cmbLoaiPhong.getSelectedItem().toString().trim();
            String maLoai = loaiPhongMap.get(tenLoai); // L·∫•y m√£ lo·∫°i t·ª´ t√™n lo·∫°i

            PhongDTO phong = new PhongDTO();
            phong.setMaPhong(maPhong);
            phong.setTenPhong(tenPhong);
            phong.setGiaPhong(giaPhong);
            phong.setTinhTrang(tinhTrang);
            phong.setSoNguoi(soNguoi);
            phong.setMoTa(moTa);
            phong.setMaLoai(maLoai);

            Request<PhongDTO> request = new Request<>("SUA_PHONG", phong);
            SocketManager.send(request);

            Response response = SocketManager.receive(Response.class);

            if (response != null && response.isSuccess()) {
                tableModel.setValueAt(tenPhong, selectedRow, 1);
                tableModel.setValueAt(giaPhong, selectedRow, 2);
                tableModel.setValueAt(tinhTrang, selectedRow, 3);
                tableModel.setValueAt(soNguoi, selectedRow, 4);
                tableModel.setValueAt(moTa, selectedRow, 5);
                tableModel.setValueAt(maLoai, selectedRow, 6);

                JOptionPane.showMessageDialog(this, "C·∫≠p nh·∫≠t th√¥ng tin ph√≤ng th√†nh c√¥ng!", "Th√†nh c√¥ng", JOptionPane.INFORMATION_MESSAGE);
              lamMoiPhong();
            } else {
                String error = response != null ? response.getData().toString() : "L·ªói kh√¥ng x√°c ƒë·ªãnh";
                JOptionPane.showMessageDialog(this, "C·∫≠p nh·∫≠t ph√≤ng th·∫•t b·∫°i: " + error, "L·ªói", JOptionPane.ERROR_MESSAGE);
            }
        } catch (IOException ex) {
            ex.printStackTrace();
            JOptionPane.showMessageDialog(this, "L·ªói k·∫øt n·ªëi ƒë·∫øn server: " + ex.getMessage(), "L·ªói h·ªá th·ªëng", JOptionPane.ERROR_MESSAGE);
        } catch (Exception ex) {
            ex.printStackTrace();
            JOptionPane.showMessageDialog(this, "L·ªói kh√¥ng mong mu·ªën: " + ex.getMessage(), "L·ªói", JOptionPane.ERROR_MESSAGE);
        }
    }
    private void xoaPhong() {
        int selectedRow = table.getSelectedRow();
        if (selectedRow == -1) {
            JOptionPane.showMessageDialog(this, "Vui l√≤ng ch·ªçn ph√≤ng c·∫ßn x√≥a!", "Th√¥ng b√°o", JOptionPane.WARNING_MESSAGE);
            return;
        }

        int confirm = JOptionPane.showConfirmDialog(this, "B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a ph√≤ng n√†y?", "X√°c nh·∫≠n", JOptionPane.YES_NO_OPTION);
        if (confirm != JOptionPane.YES_OPTION) {
            return;
        }

        try {
            String maPhong = (String) tableModel.getValueAt(selectedRow, 0);

            Request<String> request = new Request<>("XOA_PHONG", maPhong);
            SocketManager.send(request);

            Response<?> response = SocketManager.receive(Response.class);

            if (response != null && response.isSuccess()) {
                tableModel.removeRow(selectedRow);
                JOptionPane.showMessageDialog(this, "X√≥a ph√≤ng th√†nh c√¥ng!", "Th√†nh c√¥ng", JOptionPane.INFORMATION_MESSAGE);
                lamMoiPhong();
            } else {
                String error = response != null ? response.getData().toString() : "L·ªói kh√¥ng x√°c ƒë·ªãnh";
                JOptionPane.showMessageDialog(this, "X√≥a ph√≤ng th·∫•t b·∫°i: " + error, "L·ªói", JOptionPane.ERROR_MESSAGE);
            }
        } catch (IOException ex) {
            ex.printStackTrace();
            JOptionPane.showMessageDialog(this, "L·ªói k·∫øt n·ªëi ƒë·∫øn server: " + ex.getMessage(), "L·ªói h·ªá th·ªëng", JOptionPane.ERROR_MESSAGE);
        } catch (Exception ex) {
            ex.printStackTrace();
            JOptionPane.showMessageDialog(this, "L·ªói kh√¥ng mong mu·ªën: " + ex.getMessage(), "L·ªói", JOptionPane.ERROR_MESSAGE);
        }
    }

private void timKiemPhong(String keyword) {
    Request<String> request = new Request<>("TIM_PHONG_NANG_CAO", keyword.trim());

    try {
        SocketManager.send(request);
        Response response = SocketManager.receive(Response.class); // Kh√¥ng generic
        if (response != null && response.isSuccess()) {
            // √âp ki·ªÉu d·ªØ li·ªáu tr·∫£ v·ªÅ
            List<?> rawList = (List<?>) response.getData();
            List<PhongDTO> ds = new ArrayList<>();
            for (Object obj : rawList) {
                ds.add(new Gson().fromJson(new Gson().toJson(obj), PhongDTO.class));
            }

            tableModel.setRowCount(0); // X√≥a d·ªØ li·ªáu c≈© trong b·∫£ng
            for (PhongDTO phong : ds) {
                tableModel.addRow(new Object[]{
                        phong.getMaPhong(),
                        phong.getTenPhong(),
                        phong.getMaLoai(),
                        phong.getGiaPhong(),
                        phong.getSoNguoi(),
                        phong.getTinhTrang() == 0 ? "C√≤n tr·ªëng" : "ƒêang s·ª≠ d·ª•ng", // Chuy·ªÉn tr·∫°ng th√°i th√†nh ch·ªØ
                        phong.getMoTa()
                });
            }
        } else {
            JOptionPane.showMessageDialog(this, "Kh√¥ng t√¨m th·∫•y d·ªØ li·ªáu ph√π h·ª£p!", "K·∫øt qu·∫£", JOptionPane.INFORMATION_MESSAGE);
        }
    } catch (IOException ex) {
        ex.printStackTrace();
        JOptionPane.showMessageDialog(this,
                "L·ªói t√¨m ki·∫øm n√¢ng cao: " + ex.getMessage(),
                "L·ªói h·ªá th·ªëng", JOptionPane.ERROR_MESSAGE);
    }
}

    private void addPhong() {
        String tenPhong = txtTenPhong.getText();
        String loaiPhong = (String) cmbLoaiPhong.getSelectedItem();
        String giaPhong = txtGiaPhong.getText();
        String soNguoi = txtSoNguoi.getText();
        String trangThai = (String) cmbTrangThai.getSelectedItem();

        // Ki·ªÉm tra v√† x·ª≠ l√Ω d·ªØ li·ªáu nh·∫≠p tr∆∞·ªõc khi th√™m v√†o ƒë·ªëi t∆∞·ª£ng Phong
        System.out.println("T√™n ph√≤ng: " + tenPhong);
        System.out.println("Lo·∫°i ph√≤ng: " + loaiPhong);
        System.out.println("Gi√° ph√≤ng: " + giaPhong);
        System.out.println("S·ªë ng∆∞·ªùi: " + soNguoi);
        System.out.println("Tr·∫°ng th√°i: " + trangThai);
    }

    private void lamMoiPhong() {
        txtTenPhong.setText("");
        txtGiaPhong.setText("");
        txtSoNguoi.setText("");
        txaMoTa.setText("");
        cmbLoaiPhong.setSelectedIndex(0); // n·∫øu comboBox c√≥ danh s√°ch lo·∫°i ph√≤ng
        cmbTrangThai.setSelectedIndex(0); // n·∫øu c√≥ comboBox t√¨nh tr·∫°ng (VD: Tr·ªëng/ƒêang s·ª≠ d·ª•ng)
        txtTenPhong.requestFocus();
        loadTableData(); // load l·∫°i d·ªØ li·ªáu b·∫£ng ph√≤ng
    }

    private boolean isValidInput(String input, String regex) {
        return input.matches(regex);
    }

    private void showError(String message, JTextField field) {
        JOptionPane.showMessageDialog(this, message, "Th√¥ng b√°o l·ªói", JOptionPane.ERROR_MESSAGE);
        field.requestFocus();
    }
    private boolean validateInputs() {
        if (
                txtTenPhong.getText().trim().isEmpty() ||
                txtGiaPhong.getText().trim().isEmpty() ||
                txtSoNguoi.getText().trim().isEmpty()
                ) {
            JOptionPane.showMessageDialog(this, "Vui l√≤ng ƒëi·ªÅn ƒë·∫ßy ƒë·ªß th√¥ng tin!", "C·∫£nh b√°o", JOptionPane.WARNING_MESSAGE);
            return false;
        }


        // T√™n ph√≤ng: "Ph√≤ng" + s·ªë
        if (!isValidInput(txtTenPhong.getText().trim(), "^Ph√≤ng\\s\\d{1,3}$")) {
            showError("T√™n ph√≤ng kh√¥ng h·ª£p l·ªá. ƒê·ªãnh d·∫°ng ƒë√∫ng: Ph√≤ng + s·ªë (VD: Ph√≤ng 25).", txtTenPhong);
            return false;
        }

        // Gi√° ph√≤ng: s·ªë th·ª±c > 0
        try {
            double gia = Double.parseDouble(txtGiaPhong.getText().trim());
            if (gia <= 0) {
                showError("Gi√° ph√≤ng ph·∫£i l·ªõn h∆°n 0.", txtGiaPhong);
                return false;
            }
        } catch (NumberFormatException e) {
            showError("Gi√° ph√≤ng ph·∫£i l√† s·ªë h·ª£p l·ªá.", txtGiaPhong);
            return false;
        }

        // S·ªë ng∆∞·ªùi: s·ªë nguy√™n d∆∞∆°ng <= 10
        try {
            int soNguoi = Integer.parseInt(txtSoNguoi.getText().trim());
            if (soNguoi <= 0 || soNguoi > 10) {
                showError("S·ªë ng∆∞·ªùi ph·∫£i t·ª´ 1 ƒë·∫øn 10.", txtSoNguoi);
                return false;
            }
        } catch (NumberFormatException e) {
            showError("S·ªë ng∆∞·ªùi ph·∫£i l√† s·ªë nguy√™n.", txtSoNguoi);
            return false;
        }

        return true;
    }

    public void mouseClicked(MouseEvent e) {
        int selectedRow = table.getSelectedRow();
        if (selectedRow != -1) {
            // T·∫°m th·ªùi v√¥ hi·ªáu h√≥a ƒë·ªÉ tr√°nh trigger nhi·ªÅu l·∫ßn
            table.setEnabled(false);

            txtTenPhong.setText(tableModel.getValueAt(selectedRow, 1).toString());
            cmbLoaiPhong.setSelectedItem(tableModel.getValueAt(selectedRow, 2).toString());
            txtGiaPhong.setText(tableModel.getValueAt(selectedRow, 3).toString());
            txtSoNguoi.setText(tableModel.getValueAt(selectedRow, 4).toString());
            cmbTrangThai.setSelectedItem(tableModel.getValueAt(selectedRow, 5).toString());
            txaMoTa.setText(tableModel.getValueAt(selectedRow, 6).toString());


            // K√≠ch ho·∫°t l·∫°i b·∫£ng
            table.setEnabled(true);
        }
    }

    @Override
    public void mousePressed(MouseEvent e) {

    }

    @Override
    public void mouseReleased(MouseEvent e) {

    }

    @Override
    public void mouseEntered(MouseEvent e) {

    }

    @Override
    public void mouseExited(MouseEvent e) {

    }

    @Override
    public void actionPerformed(ActionEvent e) {
        RoundedButton btn = (RoundedButton) e.getSource();

        if (btn.getText().equals("Th√™m")) {
              themPhong();
        } else if (btn.getText().equals("S·ª≠a")) {
            suaPhong();
        } else if (btn.getText().equals("L√†m m·ªõi")) {
            lamMoiPhong();
        } else if(btn.getText().equals("X√≥a")){
            xoaPhong();
        }
    }

}